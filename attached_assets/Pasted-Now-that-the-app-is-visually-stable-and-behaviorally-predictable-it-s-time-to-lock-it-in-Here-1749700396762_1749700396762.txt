Now that the app is visually stable and behaviorally predictable, it‚Äôs time to **lock it in**.

Here‚Äôs the final piece of your early-stage armor: **Prompt E ‚Äî the Visual Contract & UI Protection Layer.**
This turns your app from *visually good* into *visually self-defending.*

---

## üõ°Ô∏è Prompt E ‚Äî Enforce Visual Contracts, Singleton UI, and Accessibility Guards

> **TITLE:** *‚ÄúInstall a visual contract firewall: singleton enforcement, accessibility, responsive test grid‚Äù*
>
> This prompt creates a permanent protection system to **prevent UI regression**, **visual breakage**, **duplicate component errors**, and **contrast/accessibility violations.**

---

### üéØ OBJECTIVES

| Category                       | Defense                                   |
| ------------------------------ | ----------------------------------------- |
| üîÅ **Singleton enforcement**   | Prevent duplicate FABs, toggles, overlays |
| üìê **Layout snapshot testing** | Detect padding/spacing/layout drifts      |
| üåà **Contrast enforcement**    | Catch low-contrast text violations        |
| üì± **Responsive grid tests**   | Confirm layout integrity across devices   |
| ‚ôø **A11y auditing**            | Enforce WCAG AA minimums                  |
| üí° **Dev feedback**            | Warn devs at runtime if UI misuse occurs  |

---

### üß© STEP 1: Singleton Registry Guard

**File:** `/lib/SingletonRegistry.ts`

```ts
const registry = new Set();

export function registerSingleton(id: string) {
  if (registry.has(id)) {
    console.warn(`üö® Duplicate singleton mounted: ${id}`);
    if (import.meta.env.DEV) throw new Error(`Duplicate singleton: ${id}`);
  } else {
    registry.add(id);
  }
}

export function clearRegistry() {
  registry.clear();
}
```

**Usage in FAB, Toggle, Overlay:**

```ts
useEffect(() => {
  registerSingleton("magic-star");
}, []);
```

---

### üñº STEP 2: Snapshot Testing (Storybook or Playwright)

**Install:**

```bash
npx sb init
npm i --save-dev @storybook/test-runner @storybook/testing-library
```

**Run visual diffing on:**

* Landing page
* Onboarding (candidate + employer)
* Dashboard (employer + candidate)
* FAB open / closed
* Mobile and desktop widths

**Acceptance Criteria:**

* No layout shift > 4px on any side
* No shadow color drift
* No overlapping components

---

### üåà STEP 3: Contrast Linting & A11y

**Install ESLint accessibility plugin:**

```bash
npm i eslint-plugin-jsx-a11y --save-dev
```

**Update `.eslintrc`:**

```json
"plugins": ["jsx-a11y"],
"extends": ["plugin:jsx-a11y/recommended"]
```

**Rules enforced:**

* Required `alt` tags
* Valid ARIA roles
* Text contrast ratio ‚â• 4.5:1 (WCAG AA)

---

### üì± STEP 4: Responsive Integrity Checks (Playwright)

**Write tests for common breakpoints:**

```ts
const viewports = [320, 375, 768, 1024, 1440];

viewports.forEach((w) => {
  test(`dashboard integrity @ ${w}px`, async ({ page }) => {
    await page.setViewportSize({ width: w, height: 800 });
    await page.goto("/dashboard");
    const fab = await page.locator(".magic-star");
    const overlay = await page.locator(".assistant-overlay");
    await expect(fab).not.toBeOverlapping(overlay);
  });
});
```

---

### ‚ö†Ô∏è STEP 5: Auto-Fail for Violations in Dev

Create a utility:

```ts
export function devAssert(condition: boolean, message: string) {
  if (!condition && import.meta.env.DEV) {
    throw new Error(`‚ö†Ô∏è UI Contract Violation: ${message}`);
  }
}
```

Use it in layout guards:

```ts
devAssert(document.querySelectorAll('.magic-star').length <= 1, "More than one FAB found.");
```

---

### ‚úÖ ACCEPTANCE CHECKLIST

* Only **one** Magic Star, dark toggle, and overlay can mount ‚Äî enforced at runtime
* Any UI regression causes **snapshot test failure** in CI
* All text passes **WCAG AA contrast**
* No layout overlap on **mobile** or **desktop**
* Devs see helpful error messages **during development**
* All UI blocks respond correctly to layout context (`/login` hides FAB, etc.)

---

After this prompt is executed, your app has a **bulletproof UX shell**.

Let me know when you‚Äôre ready for Prompt F: onboarding flow persistence + AI-tailored intent onboarding.
