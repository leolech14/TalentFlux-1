import { jsPDF } from "jspdf";

interface CVData {
  personalInfo: {
    name: string;
    title: string;
    email: string;
    phone: string;
    location: string;
  };
  summary: string;
  experience: Array<{
    company: string;
    position: string;
    duration: string;
    description: string;
  }>;
  education: Array<{
    institution: string;
    degree: string;
    year: string;
  }>;
  skills: string[];
  languages: Array<{
    language: string;
    proficiency: string;
  }>;
}

export function generateCVPDF(data: CVData): Blob {
  const doc = new jsPDF();
  let yPosition = 20;
  
  // Helper function to add text with word wrap
  const addText = (text: string, x: number, y: number, maxWidth: number = 170) => {
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, x, y);
    return y + (lines.length * 7);
  };
  
  // Header with gradient effect (simulated)
  doc.setFillColor(147, 51, 234); // Purple
  doc.rect(0, 0, 210, 40, "F");
  
  // Personal Info
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont("helvetica", "bold");
  doc.text(data.personalInfo.name, 20, yPosition);
  
  doc.setFontSize(14);
  doc.setFont("helvetica", "normal");
  doc.text(data.personalInfo.title, 20, yPosition + 10);
  
  // Contact info
  doc.setFontSize(10);
  const contactY = yPosition + 20;
  doc.text(`${data.personalInfo.email} | ${data.personalInfo.phone} | ${data.personalInfo.location}`, 20, contactY);
  
  yPosition = 50;
  doc.setTextColor(0, 0, 0);
  
  // Summary
  if (data.summary) {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Professional Summary", 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    yPosition = addText(data.summary, 20, yPosition);
    yPosition += 10;
  }
  
  // Experience
  if (data.experience.length > 0) {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Experience", 20, yPosition);
    yPosition += 8;
    
    data.experience.forEach((exp) => {
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text(exp.position, 20, yPosition);
      
      doc.setFont("helvetica", "normal");
      doc.text(`${exp.company} | ${exp.duration}`, 20, yPosition + 5);
      yPosition += 12;
      
      doc.setFontSize(10);
      yPosition = addText(exp.description, 20, yPosition);
      yPosition += 8;
      
      // Check if we need a new page
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
    });
  }
  
  // Education
  if (data.education.length > 0) {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Education", 20, yPosition);
    yPosition += 8;
    
    data.education.forEach((edu) => {
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text(edu.degree, 20, yPosition);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`${edu.institution} | ${edu.year}`, 20, yPosition + 5);
      yPosition += 12;
    });
    yPosition += 5;
  }
  
  // Skills
  if (data.skills.length > 0) {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Skills", 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    const skillsText = data.skills.join(" â€¢ ");
    yPosition = addText(skillsText, 20, yPosition);
    yPosition += 10;
  }
  
  // Languages
  if (data.languages && data.languages.length > 0) {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Languages", 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    data.languages.forEach((lang) => {
      doc.text(`${lang.language}: ${lang.proficiency}`, 20, yPosition);
      yPosition += 5;
    });
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text("Generated by TalentFlux AI", 105, 290, { align: "center" });
  
  return doc.output("blob");
}

// Mock data generator for testing
export function generateMockCVData(): CVData {
  return {
    personalInfo: {
      name: "John Doe",
      title: "Senior Software Engineer",
      email: "john.doe@example.com",
      phone: "+1 (555) 123-4567",
      location: "San Francisco, CA"
    },
    summary: "Experienced software engineer with 8+ years developing scalable web applications. Passionate about creating elegant solutions to complex problems and mentoring junior developers.",
    experience: [
      {
        company: "Tech Corp",
        position: "Senior Software Engineer",
        duration: "2020 - Present",
        description: "Led development of microservices architecture serving 1M+ users. Implemented CI/CD pipelines reducing deployment time by 60%."
      },
      {
        company: "StartupXYZ",
        position: "Full Stack Developer",
        duration: "2017 - 2020",
        description: "Built real-time collaboration features using WebSockets. Optimized database queries improving performance by 40%."
      }
    ],
    education: [
      {
        institution: "University of California, Berkeley",
        degree: "B.S. Computer Science",
        year: "2016"
      }
    ],
    skills: ["React", "TypeScript", "Node.js", "Python", "AWS", "Docker", "GraphQL", "PostgreSQL"],
    languages: [
      { language: "English", proficiency: "Native" },
      { language: "Spanish", proficiency: "Professional" }
    ]
  };
} 